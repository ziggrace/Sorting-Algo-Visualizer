{"version":3,"sources":["logo.svg","components/Bar.jsx","components/Bars.jsx","App.js","reportWebVitals.js","index.js"],"names":["Bar","length","height","id","color","style","backgroundColor","border","width","Bars","numBars","useState","bars","setBars","sorting","setSorting","useEffect","createBars","newBars","val","push","Math","random","visualSwap","cur","j2","j1","time","arr","setTimeout","console","log","Object","assign","newArr","finalVisMerger","l","r","m","i","visualMerge","merge","n1","n2","L","Array","R","j","k","copy","mergeSort","parseInt","className","onClick","randomIndex","floor","disabled","n","timeMultiplier","map","bar","App","setNumBars","curBars","setCurBars","value","onChange","e","target","isNaN","preventDefault","updateBars","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1fac7424.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { useState } from 'react';\n\nconst Bar = ({length, height, id, color}) => {\n    // const [color, setColor] = useState(\"blue\")\n\n    // // console.log(length)\n    // const myColor = () => {\n    //     setColor(\"red\" ? color === \"blue\" : \"blue\")\n    // }\n\n    return (\n        <div style={{ backgroundColor: `${color}`, border: '1px solid black', height: `${height}%`, width: `${length}%`, id: {id}}}>\n        </div>\n    )\n}\n\nexport default Bar","import React, { useEffect, useState } from \"react\";\nimport Bar from \"./Bar.jsx\";\n\nconst Bars = ({ numBars }) => {\n  const [bars, setBars] = useState([]);\n  const [sorting, setSorting] = useState(false);\n  //const [timeMult, setTimeMult] = useState(1)\n\n  useEffect(() => {\n    setBars(createBars(numBars));\n  }, [numBars]);\n\n  const createBars = (numBars) => {\n    const newBars = [];\n    for (let val = 0; val < numBars; val++) {\n      newBars.push(\n        {\n          length: 100 / numBars,\n          height: 10 + Math.random() * 90,\n          id:val,\n          color:\"red\"\n        }\n      );\n    }\n    return newBars;\n  };\n\n\n//   const updateColor = () =>{\n\n//   }\n\n//   const memoizedHandleClick = useCallback(\n//     () => {\n//         console.log(\"updating\")\n//         setColor(\"purple\")\n//     },\n//     [], // Tells React to memoize regardless of arguments.\n//   )\n\n  const shuffle = () => {\n    const copy = [...bars];\n    let time = 0\n    for (let i = bars.length - 1; i > 0; i--) {\n      const randomIndex = Math.floor(Math.random() * (i + 1));\n      [copy[i], copy[randomIndex]] = [copy[randomIndex], copy[i]];\n      time ++\n      visualSwap(copy, i, randomIndex, time);\n    }\n    visualSwap(copy, 0, 1, time)\n    //console.log(bars)\n  };\n\n  const visualSwap = (cur, j2, j1, time) => {\n    const arr = [...cur];\n    [arr[j2], arr[j1]] = [arr[j1], arr[j2]];\n    setTimeout(() => {\n      [arr[j2], arr[j1]] = [arr[j1], arr[j2]];\n      console.log(arr)\n      console.log(arr[j1], arr[j2])\n      Object.assign(arr[j1], {color: \"blue\"})\n      Object.assign(arr[j2], {color: \"blue\"})\n      setBars(arr);\n    }, time * 500);\n    setTimeout(() =>{\n      const newArr = [...arr]\n      console.log(j1, j2)\n      Object.assign(newArr[j1], {color: \"red\"})\n      Object.assign(newArr[j2], {color: \"red\"})\n      console.log(newArr)\n      setBars(newArr)\n    }, (time + 1) * 500)\n  }\n  ;\n\n  function swap(items, leftIndex, rightIndex){\n    var temp = items[leftIndex];\n    items[leftIndex] = items[rightIndex];\n    items[rightIndex] = temp;\n}\nfunction partition(items, left, right) {\n    var pivot   = items[Math.floor((right + left) / 2)], //middle element\n        i       = left, //left pointer\n        j       = right; //right pointer\n    while (i <= j) {\n        while (items[i] < pivot) {\n            i++;\n        }\n        while (items[j] > pivot) {\n            j--;\n        }\n        if (i <= j) {\n            swap(items, i, j); //sawpping two elements\n            i++;\n            j--;\n        }\n    }\n    return i;\n}\n\nfunction quickSort(items, left, right) {\n    var index;\n    if (items.length > 1) {\n        index = partition(items, left, right); //index returned from partition\n        if (left < index - 1) { //more elements on the left side of the pivot\n            quickSort(items, left, index - 1);\n        }\n        if (index < right) { //more elements on the right side of the pivot\n            quickSort(items, index, right);\n        }\n    }\n    return items;\n}\n\n  // An optimized version of Bubble Sort\n  function bubbleSort() {\n    const arr = [...bars];\n    const n = arr.length;\n    var i, j;\n    let timeMultiplier = 0;\n    setSorting(true);\n    for (i = 0; i < n - 1; i++) {\n      for (j = 0; j < n - i - 1; j++) {\n        if (arr[j].height > arr[j + 1].height) {\n          [arr[j + 1], arr[j]] = [arr[j], arr[j + 1]];\n          timeMultiplier++;\n          console.log(\"from swap\", j+1, j)\n          visualSwap(arr, j + 1, j, timeMultiplier);\n        }\n      }\n    }\n    setTimeout(() => setSorting(false), timeMultiplier * 100);\n  }\n\n  const visualMerge = () => {\n    let time = 1\n    return (arr, l, r, m) => {\n      console.log(time)\n      setTimeout(()=>{\n      for (let i = l; i <= r; i++){\n          arr[i].color = \"blue\"\n      }\n      setBars(arr)\n    }, time * 1000)\n    setTimeout(()=>{\n      for (let i = l; i <= r; i++){\n          arr[i].color = \"red\"\n      }\n      if (l === 0 && r === bars.length - 1) time = 1\n      setBars([...arr])\n    }, (time + 1) * 1000)\n    time ++\n  }\n  }\n\n  const finalVisMerger = visualMerge()\n\n\n  function merge(arr, l, m, r, time) {\n    var n1 = m - l + 1;\n    var n2 = r - m;\n\n    // Create temp arrays\n    var L = new Array(n1);\n    var R = new Array(n2);\n\n    // Copy data to temp arrays L[] and R[]\n    for (var i = 0; i < n1; i++) L[i] = arr[l + i];\n    for (var j = 0; j < n2; j++) R[j] = arr[m + 1 + j];\n\n    // Merge the temp arrays back into arr[l..r]\n\n    // Initial index of first subarray\n    var i = 0;\n\n    // Initial index of second subarray\n    var j = 0;\n\n    // Initial index of merged subarray\n    var k = l;\n\n    while (i < n1 && j < n2) {\n      if (L[i].height <= R[j].height) {\n        arr[k] = L[i];\n        i++;\n      } else {\n        arr[k] = R[j];\n        j++;\n      }\n      k++;\n    }\n\n    // Copy the remaining elements of\n    // L[], if there are any\n    while (i < n1) {\n      arr[k] = L[i];\n      i++;\n      k++;\n    }\n\n    // Copy the remaining elements of\n    // R[], if there are any\n    while (j < n2) {\n      arr[k] = R[j];\n      j++;\n      k++;\n    }\n\n    const copy = [...arr]\n\n    finalVisMerger(copy, l, r, m)\n    console.log(\"incrementing\")\n  }\n\n  // l is for left index and r is\n  // right index of the sub-array\n  // of arr to be sorted */\n  function mergeSort(arr, l, r, time=1) {\n    //const arr = [...bars]\n    if (l >= r) {\n      return; //returns recursively\n    }\n    var m = l + parseInt((r - l) / 2);\n    time ++\n    mergeSort(arr, l, m, time);\n    time++\n    mergeSort(arr, m + 1, r, time);\n    merge(arr, l, m, r, time);\n    //setTimeMult(timeMult + 1)\n    //setTimeMult(1);\n  }\n\n  // console.log(bars)\n  // console.log(numBars)\n  return (\n    //const bars = []\n    <div className=\"barsContainer\">\n      <button onClick={shuffle} disabled={sorting}>\n        Shuffle\n      </button>\n      <button onClick={bubbleSort}>Bubble Sort</button>\n      <button onClick={() => {\n        mergeSort([...bars], 0, bars.length - 1)\n        }}>\n        Merge Sort\n      </button>\n      {/* <button onClick={quickSort} disabled>Quick Sort</button> */}\n      <div className=\"bars\">\n        {bars.map(bar=><Bar length={bar.length} height={bar.height} color={bar.color} id={bar.id}/>)}\n      </div>\n    </div>\n  );\n};\n\nexport default Bars;\n","import logo from './logo.svg';\nimport './App.css';\nimport Bars from './components/Bars.jsx'\nimport React, { useState } from 'react';\n\nfunction App() {\n  const [numBars, setNumBars] = useState(10)\n  const [curBars, setCurBars] = useState(10)\n\n  const updateBars = (e) => {\n    e.preventDefault()\n    setNumBars(curBars)\n    // console.log(curBars)\n    //setCurBars(0)\n  }\n\n  return (\n    <div className=\"App\">\n      <form>\n        <input value={curBars} onChange={(e)=>setCurBars(e.target.value)} ></input>\n        <button disabled={curBars > 150 || curBars <= 2 || isNaN(+curBars)} onClick={e => {if(curBars <= 200 && curBars >0) updateBars(e)}} className=\"update\">Update Number of Bars (Max 150)</button>\n      </form>\n      {/* <button onClick={updateBars}>Change Number of Bars</button> */}\n      <Bars numBars={numBars}/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}